version: "1.1"
#MYSQL_HOST, MYSQL_PORT, MYSQL_ROOT_PASSWORD
#MYSQL_DATABASE, MYSQL_USER, MYSQL_PASSWORD
#총 5가지 환경변수가 저장된 .env 파일 필요
#이중 MYSQL_HOST에 설정된 이름을 이용하여 도커의 DNS를 통해 백엔드와 db 통신
#docker-compose convert 명령어를 통해 환경변수 잘 적용됐는지 확인 가능

#아래는 .env파일 예제
#################################
#    MYSQL_HOST=database
#    MYSQL_PORT=3306
#    MYSQL_ROOT_PASSWORD=rootpass
#    MYSQL_DATABASE=webpushdb
#    MYSQL_USER=username
#    MYSQL_PASSWORD=password
#################################

services:
  database:
    container_name: ${MYSQL_HOST}
    image: mariadb:10.11
    ports:
      - ${MYSQL_PORT}:${MYSQL_PORT}
    volumes:
      - ./database/conf.d:/etc/mysql/conf.d #기본 configuration
      - ./database/data:/var/lib/mysql #실제 data 저장되는 곳
      - ./database/initdb.d:/docker-entrypoint-initdb.d #시작할때 실행할 sql 구문
    env_file: .env
    environment:
      TZ: Asia/Seoul
    restart: always
    healthcheck: #mariadb가 완전히 살아난 이후 keygen과 통신을 위해 healthcheck
      test: ["CMD", "mysqladmin", "ping", "-h", "${MYSQL_HOST}"]
      timeout: 3s
      retries: 2
  
  keygen:
    image: playjnj/webpushkeygen:1.0
    depends_on:
      database: #healthcheck가 완료된 경우 keygen 컨테이너 실행
        condition: service_healthy
    env_file: .env

  backend:
    container_name: backend
    image: playjnj/webpushbackend:1.2
    depends_on:
      keygen:
        condition: service_completed_successfully
    env_file : .env
    ports:
      - "8001:8001"

  frontend:
    container_name: frontend
    image: playjnj/webpushfrontend:1.3
    depends_on:
      - backend
    ports:
      - "8000:8000"

